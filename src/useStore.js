import create from 'zustand'

const winThreshold = 0.75

const levels = [
  {
    mapHeight: 20,
    mapWidth: 20,
    levelColor: 'forestgreen',
    starCount: 10,
    obstacleCount: 5,
    wanderEnemyCount: 0,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 20,
    mapWidth: 20,
    levelColor: 'forestgreen',
    starCount: 15,
    obstacleCount: 15,
    wanderEnemyCount: 1,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 30,
    mapWidth: 30,
    levelColor: 'forestgreen',
    starCount: 30,
    obstacleCount: 25,
    wanderEnemyCount: 2,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 20,
    mapWidth: 40,
    levelColor: 'forestgreen',
    starCount: 30,
    obstacleCount: 20,
    wanderEnemyCount: 4,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 0,
  },
  // ---
  {
    mapHeight: 50,
    mapWidth: 50,
    levelColor: 'blue',
    starCount: 15,
    obstacleCount: 15,
    wanderEnemyCount: 7,
    hunterEnemyCount: 1,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 70,
    mapWidth: 70,
    levelColor: 'blue',
    starCount: 20,
    obstacleCount: 18,
    wanderEnemyCount: 8,
    hunterEnemyCount: 1,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 60,
    mapWidth: 60,
    levelColor: 'blue',
    starCount: 40,
    obstacleCount: 5,
    wanderEnemyCount: 6,
    hunterEnemyCount: 2,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 100,
    mapWidth: 30,
    levelColor: 'blue',
    starCount: 50,
    obstacleCount: 20,
    wanderEnemyCount: 8,
    hunterEnemyCount: 2,
    spinnerEnemyCount: 0,
  },
  // ---
  {
    mapHeight: 40,
    mapWidth: 40,
    levelColor: 'indigo',
    starCount: 20,
    obstacleCount: 5,
    wanderEnemyCount: 0,
    hunterEnemyCount: 4,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 35,
    mapWidth: 45,
    levelColor: 'indigo',
    starCount: 25,
    obstacleCount: 0,
    wanderEnemyCount: 7,
    hunterEnemyCount: 2,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 40,
    mapWidth: 50,
    levelColor: 'indigo',
    starCount: 25,
    obstacleCount: 8,
    wanderEnemyCount: 15,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 0,
  },
  {
    mapHeight: 30,
    mapWidth: 30,
    levelColor: 'indigo',
    starCount: 18,
    obstacleCount: 4,
    wanderEnemyCount: 2,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 2,
  },
  // ---
  {
    mapHeight: 30,
    mapWidth: 50,
    levelColor: 'maroon',
    starCount: 40,
    obstacleCount: 20,
    wanderEnemyCount: 0,
    hunterEnemyCount: 0,
    spinnerEnemyCount: 2,
  },
  // { mapHeight: 50, mapWidth: 50, levelColor: 'maroon', starCount: 5, obstacleCount: 5, wanderEnemyCount: 1, hunterEnemyCount: 1, spinnerEnemyCount: 0 },
  // { mapHeight: 50, mapWidth: 50, levelColor: 'maroon', starCount: 5, obstacleCount: 5, wanderEnemyCount: 1, hunterEnemyCount: 1, spinnerEnemyCount: 0 },
  // { mapHeight: 50, mapWidth: 50, levelColor: 'maroon', starCount: 5, obstacleCount: 5, wanderEnemyCount: 1, hunterEnemyCount: 1, spinnerEnemyCount: 0 },
]

const endLevel = {
  mapHeight: 10,
  mapWidth: 10,
  levelColor: 'black',
  starCount: 0,
  obstacleCount: 5,
  wanderEnemyCount: 0,
  hunterEnemyCount: 0,
  spinnerEnemyCount: 0,
}

export const allStarCount = levels.map(({ starCount }) => starCount).reduce((a, b) => a + b)

export const useStore = create((set) => ({
  isPlayerAlive: true,
  lives: 3,
  level: 0,
  collectedStars: 0,
  collectedStarsOnLevel: 0,
  isGateOpen: false,
  isGameOver: false,
  isGameFinished: false,
  ...levels[0],
  collectStar: () =>
    set((state) => ({
      collectedStarsOnLevel: state.collectedStarsOnLevel + 1,
      isGateOpen: state.collectedStarsOnLevel + 1 > state.starCount * winThreshold,
    })),
  looseLife: () => set((state) => ({ lives: state.lives - 1, isPlayerAlive: false, isGameOver: state.lives - 1 <= 0 })),
  restart: () => set(() => ({ isPlayerAlive: true })),
  loadNextLevel: () =>
    set((state) => ({
      level: state.level + 1,
      isGateOpen: false,
      collectedStars: state.collectedStars + state.collectedStarsOnLevel,
      collectedStarsOnLevel: 0,
      isGameFinished: state.level + 1 === levels.length,
      ...(state.level + 1 === levels.length ? endLevel : levels[state.level + 1]),
    })),
}))

export const initialState = useStore.getState()
